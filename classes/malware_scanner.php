<?php

class malCure_Malware_Scanner extends malCure_Scanner {

	static function get_instance() {
		static $instance = null;
		if ( is_null( $instance ) ) {
			$instance = new self();
			$instance->init();
		}
		return $instance;
	}

	private function __construct() {
	}

	function init() {
		// add_action( 'mss_settings_menu', array( $this, 'submenu_page' ) );
		add_action( 'wp_ajax_mss_update_definitions', array( $this, 'mss_update_definitions' ) );
		add_action( 'wp_ajax_nopriv_mss_update_definitions', '__return_false' );
		add_action( 'wp_ajax_mss_trigger_scan', array( $this, 'mss_trigger_scan' ) );
		add_action( 'wp_ajax_nopriv_mss_trigger_scan', 'mss_trigger_scan' );
		add_action( 'wp_ajax_mss_init_scan', array( $this, 'mss_init_scan_responder' ) );
		add_action( 'wp_ajax_nopriv_mss_init_scan', array( $this, 'mss_init_scan_responder' ) );
		add_action( 'wp_ajax_mss_scan_request', array( $this, 'scan_responder' ) );  // Connect to final end-point, prone to hang
		add_action( 'wp_ajax_nopriv_mss_scan_request', array( $this, 'scan_responder' ) );  // Connect to final end-point, prone to hang
		add_action( 'wp_ajax_mss_scan_status', array( $this, 'mss_scan_status_handler' ) );
		add_action( 'wp_ajax_nopriv_mss_scan_status', '__return_false' );
		add_action( 'upgrader_process_complete', array( $this, 'delete_checksums' ), 9999, 2 );
		// add_action( 'update_option', array( $this, 'options_debug' ), 9999, 3 );
		add_action( 'malCure_security_suite_add_meta_boxes', array( $this, 'add_meta_boxes' ) );

		add_action( 'wp', array( $this, 'trigger_maintenance' ) );
		// Move this to some better hook so that this can be triggered via cron, ajax as well as page load
	}

	function trigger_maintenance() {
		malCure_Utils::flog( __FUNCTION__ );
		malCure_Utils::do_maintenance();
	}

	function options_debug( $option, $old_value, $value ) {
		if ( $option == 'MSS' ) {
			malCure_Utils::flog( 'NEW:' );
			if ( empty( $value['scan'] ) ) {
				malCure_Utils::flog( 'Received empty value for scan' );
				malCure_Utils::flog( debug_backtrace() );
				return;
			} else {
				malCure_Utils::flog( $value['scan'] );
			}
		}
	}

	function delete_checksums() {
		malCure_Utils::delete_option_checksums_core();
	}

	function add_meta_boxes() {
		add_meta_box( 'malcure_scanner', 'Malware Scanner', array( $this, 'scanner_meta_box' ), $GLOBALS['malCure_security_suite']['pagehook'], 'main' );
	}

	function mss_update_definitions() {
		if ( malCure_Utils::is_registered() ) {
			malCure_Utils::update_definitions();
			wp_send_json_success();
		} else {
			wp_send_json_error( 'unregistered' );
		}
	}

	function scanner_meta_box() {
		$defs = malCure_Utils::get_option_definitions();
		if ( empty( $defs ) ) {
			echo '<p>You need to update definitions before you can scan.</p>';
			submit_button( 'Update Definitions', 'primary', 'mss_update_definitions_btn' );
			echo '<div id="defs_action_response"></div>';
		} else {
			submit_button( 'Scan', 'primary', 'mss_scan_btn' );
			echo '<div id="scan_progress"></div>';
		}
		?>
		<script type="text/javascript">
			jQuery(document).ready(function($){
				// console.log('<?php // echo wp_hash_password( time() ); ?>');
				// console.log('<?php // echo wp_hash_password( '1' ); ?>');
				$("#mss_update_definitions_btn").click(function(){
					mss_update_definitions = {
						mss_update_definitions_nonce: '<?php echo wp_create_nonce( 'mss_update_definitions_scan' ); ?>',
						action: "mss_update_definitions",
						// cachebust: Date.now(), // 
					};
					$.ajax({
						url: ajaxurl,
						method: 'POST',
						data: mss_update_definitions,
						success: function(data, textStatus, jqXHR) {
							if ((typeof data) != 'object') { // is the server not sending us JSON?
								$('#defs_action_response').html('<p>Invalid response.</p>');
							}
							if (data.hasOwnProperty('success')) { // ajax request has a success but we haven't tested if success is true or false
								$('#defs_action_response').html('<p>Updated Definitions.</p>');
							} else { // perhaps this is just JSON without a success object
								$('#defs_action_response').html('<p>Request failed.</p>');
							}
						},
						error: function( jqXHR, textStatus, errorThrown){
							$('#defs_action_response').html('<p>Request error.</p>');
							//$('#defs_action_response').html('<p>Request error.</p>');
							// console.dir('error Data Begins');
							// console.dir(jqXHR);
							// console.dir(textStatus);
							// console.dir(errorThrown);
							// console.dir('error Data Ends');
						},
						complete: function(jqXHR_data, textStatus) { // use this since we need to run and catch regardless of success and failure
							// console.dir('complete Data Begins');
							// console.dir(jqXHR_data);
							// console.dir(textStatus);
							// console.dir('complete Data Ends');
							// // a good JSON response may have status: 200, statusText: "success", responseJSON (object)
						},
					});
				});
				$("#mss_scan_btn").click(function(){
					mss_trigger_scan = {
						mss_trigger_scan_nonce: '<?php echo wp_create_nonce( 'mss_trigger_scan' ); ?>',
						action: "mss_trigger_scan",
						//cachebust: Date.now(), // 
					};
					//$("#mss_trigger_scan").fadeTo("slow",.1,);
					$.ajax({
						url: ajaxurl,
						method: 'POST',
						data: mss_trigger_scan,
						success: function(data, textStatus, jqXHR) {
							console.dir('success Data Begins');
							console.dir(data);
							console.dir(textStatus);
							console.dir(jqXHR);
							console.dir('success Data Ends');
							//mss_status_updater = setInterval(mss_update_scan_status,1000);
							if ((typeof data) != 'object') { // is the server not sending us JSON?
								//response = JSON.parse( response );
							}
							if (data.hasOwnProperty('success')) { // ajax request has a success but we haven't tested if success is true or false
							} else { // perhaps this is just JSON without a success object
							}
						},
						error: function( jqXHR, textStatus, errorThrown){
							// console.dir('error Data Begins');
							// console.dir(jqXHR);
							// console.dir(textStatus);
							// console.dir(errorThrown);
							// console.dir('error Data Ends');
						},
						complete: function(jqXHR_data, textStatus) { // use this since we need to run and catch regardless of success and failure
							// console.dir('complete Data Begins');
							// console.dir(jqXHR_data);
							// console.dir(textStatus);
							// console.dir('complete Data Ends');
							// // a good JSON response may have status: 200, statusText: "success", responseJSON (object)
						},
					});
				});
				mss_status_updater = setTimeout(mss_update_scan_status,1000);
				//console.log(mss_status_updater);
			});

		function mss_update_scan_status() {
			var $ = jQuery.noConflict();
			mss_scan_status = {
				mss_scan_status_nonce: '<?php echo wp_create_nonce( 'mss_scan_status' ); ?>',
				action: "mss_scan_status",
				//cachebust: Date.now(), // 
			};
			//$("#mss_trigger_scan").fadeTo("slow",.1,);
			//console.log(mss_status_updater);
			$.ajax({
				url: ajaxurl,
				method: 'POST',
				data: mss_scan_status,
				success: function(data, textStatus, jqXHR) {
					//console.dir('updater success Data Begins');
					//console.dir(data);
					//console.dir(textStatus);
					//console.dir(jqXHR);
					//console.dir('updater success Data Ends');
					
					if(data.hasOwnProperty('success') && data.success) {
						console.log('Updater got success.');
						//files = data.data.files;
						//files.forEach(element => console.log(element));
						console.dir( data.data.total );
						console.dir( data.data.remaining );
						if(data.data.remaining){
							$('#scan_progress').addClass('inprogress');
							remaining = parseInt(data.data.remaining);
							total = parseInt(data.data.total);
							per = (remaining / total) * 100 ;
							per_remaining = 100 - per;
							console.log(per_remaining);
							started = parseInt(data.data.started);
							now = parseInt(data.data.now);
							count = total - remaining;
							secs = now - started;
							console.log( Math.round(count / secs ) + ' Files / Sec');
							$('#scan_progress').css('background','linear-gradient(90deg, #00bfe6 0%, #00bfe6 '+ per_remaining +'%, transparent '+ per_remaining +'%, transparent )')
						}
						//console.dir( Object.entries(files));
						//for (const [key, value] of Object.entries(files)) {
						//	console.log(`${key} ${value}`); // "a 5", "b 7", "c 9"
						//}
					}
					else {
						//clearInterval(mss_status_updater);
						console.log('Updater got failure. Clearing interval. Please reload the page.');
					}
					if ((typeof data) != 'object') { // is the server not sending us JSON?
						//response = JSON.parse( response );
					}
					if (data.hasOwnProperty('success')) { // ajax request has a success but we haven't tested if success is true or false
					} else { // perhaps this is just JSON without a success object
					}
				},
				error: function( jqXHR, textStatus, errorThrown){
					console.dir('eberror: updater error Data Begins');
					console.dir(jqXHR);
					console.dir(textStatus);
					console.dir(errorThrown);
					console.dir('cberror: updater error Data Ends');
				},
				complete: function(jqXHR_data, textStatus) { // use this since we need to run and catch regardless of success and failure
					// console.dir('cbcomplete: updater complete Data Begins');
					// console.dir(jqXHR_data);
					// console.dir(textStatus);
					// console.dir('cbcomplete: updater complete Data Ends');
					// // a good JSON response may have status: 200, statusText: "success", responseJSON (object)
					console.log(mss_status_updater);
					mss_status_updater = setTimeout(mss_update_scan_status,1000);
				},
			});
		}
		</script>
		<?php
	}

	/**
	 * Init Scan
	 */
	function mss_trigger_scan() {
		if ( ! wp_doing_ajax() && ! wp_doing_cron() ) {
			malCure_Utils::flog( 'Not doing ajax and not doing cron.' );
			wp_die();
		}
		if ( wp_doing_ajax() ) {
			check_ajax_referer( 'mss_trigger_scan', 'mss_trigger_scan_nonce' );
			if ( ! current_user_can( malCure_Utils::$cap ) ) {
				malCure_Utils::flog( 'Not $this->cap.' );
				malCure_Utils::flog( wp_get_current_user() );
				malCure_Utils::flog( malCure_Utils::$cap );
				wp_die();
			}
		}
		malCure_Utils::do_maintenance();
		$already_running = malCure_Utils::get_setting( 'mc_scan_tracker' );
		if ( $already_running ) {
			malCure_Utils::flog( 'ERROR: Scan ID ' . $already_running . ' is already running' );
			wp_send_json_error( 'ERROR: Scan ID ' . $already_running . ' is already running' );
		}
		// Create a stamp to track this scan
		$stamp = time();
		malCure_Utils::update_setting( 'scan_token', $stamp );
		$args = array(
			'blocking' => false,
			'timeout'  => 0.01,
			'body'     => array(
				'action' => 'mss_init_scan',
				'token'  => wp_hash_password( $stamp ),
				// 'data'   => wp_hash_password( $stamp ),
				// 'type'            => $type,
				// 'mc_scan_tracker' => malCure_Utils::get_setting( 'mc_scan_tracker' ),
			),
		);
		$response = wp_remote_post(
			admin_url( 'admin-ajax.php' ),
			$args
		);
		// can't send anything since remote request is blocked
		// Use this token to track scan progress
		wp_send_json_success( $stamp );
	}

	/**
	 * Step 2: Processes a full file + DB scan over remote requests
	 */
	function mss_init_scan_responder() {
		// ==== DEBUG ====
		$start_time = microtime( true );
		// ==== /DEBUG ====
		$token = malCure_Utils::get_setting( 'scan_token' );
		if ( empty( $token ) || empty( $_REQUEST['token'] ) || ! wp_check_password( $token, $_REQUEST['token'] ) ) {
			malCure_Utils::flog( 'mss_init_scan_responder received invalid request:' );
			malCure_Utils::flog( 'empty( $token ) ? :' . empty( $token ) );
			malCure_Utils::flog( 'empty( $_REQUEST[\'token\'] ) ? :' . empty( $_REQUEST['token'] ) );
			malCure_Utils::flog( 'wp_check_password ? :' . wp_check_password( $token, $_REQUEST['token'] ) );
			malCure_Utils::flog( $_REQUEST );
			wp_die();
		}

		$type = 'files';

		$timeout = malCure_Utils::get_setting( 'timeout' );
		if ( empty( $timeout ) ) {
			$timeout = ini_get( 'max_execution_time' );
			if ( empty( $timeout ) ) {
				$timeout = 29;
			} else {
				$timeout = $timeout - 1;
				malCure_Utils::update_setting( 'timeout', $timeout );
			}
		}
		if ( $type == 'files' ) {
			$start_time = microtime( true );
			$checksums  = $this->get_checksums();
			$files      = malCure_Utils::get_files();

			if ( ! empty( $files['files'] ) ) {
				$files = $files['files'];
				$total = count( $files );
				malCure_Utils::update_setting(
					'mc_scan_progress',
					array(
						'total'     => $total,
						'remaining' => $total,
					)
				);
				// malCure_Utils::flog( '$total' );
				// malCure_Utils::flog( $total );
			} else {
				malCure_Utils::flog( 'Scanner could not generate a list of files.' );
				throw new Exception( 'Scanner could not generate a list of files.' );
			}
			$mc_scan_tracker = $token;
			malCure_Utils::flog( 'INITIATING SCAN ID: ' . $mc_scan_tracker );
			malCure_Utils::update_setting( 'mc_scan_tracker', $mc_scan_tracker );

			$site_url  = admin_url( 'admin-ajax.php' );
			$host      = parse_url( $site_url, PHP_URL_HOST );
			$local_url = str_replace( $host, 'localhost', $site_url );

			$checksum_start_time = microtime( 1 );
			// $files               = $this->get_failed_files( $files );
			$checksum_end_time = microtime( 1 );
			malCure_Utils::flog( 'Checksum verification time: ' . ( $checksum_end_time - $checksum_start_time ) . ' seconds' );
			malCure_Utils::flog( 'File Count that failed checksums: ' . count( $files ) );

			$failed     = array();
			$batch_size = 10;
			$perf       = array();
			$segments   = 3; // should never be less than 1
			while ( $files ) {
				set_time_limit( $timeout );
				// malCure_Utils::flog( 'count perf: ' . count( $perf ) );
				if ( count( $perf ) >= $segments ) {
					// malCure_Utils::flog( 'count perf: ' . count( $perf ) );
					$perf  = array_splice( $perf, count( $perf ) - $segments, $segments );
					$boost = ( array_sum( $perf ) / count( $perf ) );
					$boost = round( $batch_size + ( $boost * $batch_size / $segments ) );
					$batch_size = min(  $boost, 100 );
					// malCure_Utils::flog( $perf );
					// malCure_Utils::flog( 'array_sum: ' . array_sum( $perf ) );
					// malCure_Utils::flog( 'count: ' . count( $perf ) );
					// malCure_Utils::flog( '$boost', false, false );
					// malCure_Utils::flog( $boost, false, false );
					// // malCure_Utils::flog( '$boost end', false, false );
					malCure_Utils::flog( '$batch_size: ' . $batch_size );
					if ( $batch_size <= 1 ) {
						$batch_size = 1;
					}
				}
				$batch = array_splice( $files, 0, $batch_size );
				
				// malCure_Utils::flog( 'SCANNING: ' . $temp[0] );
				$ts = microtime( true );
				// if ( preg_match( '/plugins/', $file ) || preg_match( '/\.malware/', $file ) || preg_match( '/themes/', $file ) ) {
					// continue; // just skip plugins while testing
				// }
				$scan_request_start = microtime(1);
				$results = $this->make_scan_request( $batch, 'file', $mc_scan_tracker, $local_url, $host, $timeout );
				$scan_request_end = microtime(1);
				$temp  = array_values( $batch );
				//$temp  = array_splice( $temp, count( $temp ) - 1, 1 );
				malCure_Utils::flog( 'Batch scan time: ' . ( $scan_request_end - $scan_request_start) . ' seconds for ' . $batch_size . ' files.' );
				if ( $results && ! empty( $results['success'] ) ) { // results can be an empty array. check for json success
					$perf[] = 1;
					if ( ! empty( $results['data'] ) ) { // we've received infected files. Let's save the results.
						$this->update_scan_status( $results['data'], $token, 'files' );
					}
				} else {
					$failed = array_merge( $failed, $batch );
					$perf[] = -1;
				}

				if ( ( count( $files ) % 100 ) == 0 ) {
					$mc_scan_progress = array(
						'total'     => $total,
						'remaining' => count( $files ),
					);
					malCure_Utils::flog( "\t\t\t" . 'Updating $mc_scan_progress.' );
					// malCure_Utils::flog( $mc_scan_progress );
					malCure_Utils::update_setting(
						'mc_scan_progress',
						$mc_scan_progress
					);
				}
				if ( ! count( $files ) ) {
					malCure_Utils::flog( 'Deleting $mc_scan_progress since no files remaining.' );
					malCure_Utils::delete_setting( 'mc_scan_progress' );
				}
				$te = microtime( true );
				// malCure_Utils::flog( 'EXECUTION TIME: ' . ( $te - $ts ) );
			}
			malCure_Utils::delete_setting( 'mc_scan_tracker' );
			// ==== DEBUG ====
			$end_time       = microtime( true );
			$execution_time = ( $end_time - $start_time );
			malCure_Utils::flog( 'Full Scan Completion Time: ' . human_time_diff( $start_time, $end_time ) );
			malCure_Utils::flog( 'COMPLETED SCAN ID: ' . $mc_scan_tracker );
			// ==== /DEBUG ====
			// wp_send_json( $_REQUEST );
			// wp_send_json_error( $_REQUEST );
			wp_send_json_success(
				array(
					'checksums' => $checksums,
					'files'     => $files,
				)
			);
		}
		$end_time_files = microtime( true );
		malCure_Utils::flog( 'File Scan Completed: ' . human_time_diff( $start_time, $end_time_files ) );
		if ( $type = 'db' ) {
		}
		$end_time_db = microtime( true );
		malCure_Utils::flog( 'DB Scan Completed: ' . human_time_diff( $end_time_files, $end_time_db ) );
	}

	function get_failed_files( $files ) {
		foreach ( $files as $file ) {
			$start_time = microtime( true );
			$end_time   = microtime( true );
			set_time_limit( 1 );
			if ( $this->fails_checksum( $file ) ) {
				$failed[] = $file;
			}
			$execution_time = ( $end_time - $start_time );
			malCure_Utils::flog( $execution_time . "\t" . filesize( $file ) . "\t" . $file, false, false );
		}
		return $failed;
	}

	/**
	 * Function to request a singular remote scan
	 *
	 * @param [type] $data
	 * @param [type] $type
	 * @return void
	 */
	function make_scan_request( $data, $type, $token, $local_url = '', $host = '', $timeout = 5 ) {
		$start_time = microtime( true );
		$args       = array(
			'timeout'  => $timeout,
			'blocking' => true,
			'body'     => array(
				'action'          => 'mss_scan_request',
				'data'            => $data,
				'token'           => $_REQUEST['token'],
				'type'            => $type,
				'mc_scan_tracker' => $token,
			),
		);
		if ( $host ) {
			$headers         = array(
				'Host' => $host,
			);
			$args['headers'] = $headers;
		}
		// malCure_Utils::flog( __FUNCTION__ . $data );
		if ( $host ) {
			$url = $local_url;
			$url = str_replace( 'https', 'http', $url );

		} else {
			$url = admin_url( 'admin-ajax.php' );
		}

		$response = wp_remote_post(
			$url,
			$args
		);

		// malCure_Utils::flog( $response );
		// malCure_Utils::flog( wp_remote_retrieve_body( $response ) );
		if ( wp_remote_retrieve_response_code( $response ) != 200 ) {
			return;
		}
		$body = wp_remote_retrieve_body( $response );
		if ( empty( $body ) || is_null( json_decode( $body ) ) ) {
			return;
		}

		$results = json_decode( $body, 1 );
		// malCure_Utils::flog( $results );
		if ( ! empty( $results['success'] ) && $results['success'] ) {
			return $results;
		}
		$end_time = microtime( true );
	}

	/**
	 * Final end-point, Responds to ajax scan request, scans synchronously, prone to hang
	 *
	 * @return void
	 */
	function scan_responder() {
		// sleep( rand( 1, 1 ) );
		// wp_send_json_success( array( 1 ) );
		$token = malCure_Utils::get_setting( 'scan_token' );
		if ( empty( $token ) || empty( $_REQUEST['token'] ) || ! wp_check_password( $token, $_REQUEST['token'] ) ) {
			wp_die();
		}

		$data = $_REQUEST['data'];
		$type = $_REQUEST['type'];
		if ( $type == 'file' ) {
			$files   = $data;
			$results = array();
			foreach ( $files as $file ) {
				// malCure_Utils::flog( 'SCANNING: ' . $file );
				$scan = $this->scan_file( $file );
				if ( $scan ) { // on infected and on clean
					if ( ! empty( $scan['id'] ) ) {
						$results[ $file ] = $scan['id'];
					} else {
						// $result[ $file ] = false;
					}
				} else {
					// $result[ $file ] = false;
				}
			}
		}
		if ( ( $type == 'db' ) ) {

		}
		wp_send_json_success( $results );
	}

	function update_scan_status( $data, $token, $type ) {
		// malCure_Utils::await_unlock();
		// malCure_Utils::flog( __FUNCTION__ . $data );
		// malCure_Utils::flog( __FUNCTION__ . $data );
		$scans = malCure_Utils::get_option( 'MSS_scans' );
		if ( empty( $scans[ $token ] ) ) {
			$scans[ $token ] = array(
				'files' => array(),
				'db'    => array(),
			);
		}
		if ( $type = 'files' ) {
			// $scans[ $token ]['files'][ $data ] = $status;
			$files                    = array_merge( $scans[ $token ]['files'], $data );
			$scans[ $token ]['files'] = $files;
		}

		update_option( 'MSS_scans', $scans );
		// malCure_Utils::do_unlock();
	}

	/**
	 * Send status of the scan
	 */
	function mss_scan_status_handler() {
		$progress            = malCure_Utils::get_setting( 'mc_scan_progress' );
		$tracker             = malCure_Utils::get_setting( 'mc_scan_tracker' );
		$progress['started'] = $tracker;
		$progress['now']     = time();
		// ,'now' => time()];
		wp_send_json_success( $progress );
		// wp_send_json_success( get_option( 'MSS' ) );
		$status           = malCure_Utils::get_option( 'MSS_SCAN_PROGRESS' );
		$status           = malCure_Utils::get_option( 'MSS_lock' );
		$token            = malCure_Utils::get_setting( 'scan_token' );
		$scan             = malCure_Utils::get_option( 'MSS_scans' );
		$status           = $scan[ $token ];
		$mc_scan_progress = malCure_Utils::update_setting(
			'mc_scan_progress',
			array(
				'total'     => time(),
				'remaining' => time() + 60,
			)
		);
		$mc_scan_progress = malCure_Utils::get_setting( 'mc_scan_progress' );
		malCure_Utils::flog( 'Fetching $mc_scan_progress' );
		malCure_Utils::flog( $mc_scan_progress );
		if ( $mc_scan_progress ) {
			$total     = empty( $mc_scan_progress['total'] ) ? $mc_scan_progress['total'] : 0;
			$remaining = empty( $mc_scan_progress['remaining'] ) ? $mc_scan_progress['remaining'] : 0;
			if ( $total && $remaining ) {
				$percentage = ( $total - $remaining ) / 100;
				wp_send_json_success( array( $mc_scan_progress, $percentage ) );
			}
		} else {
		}
		wp_send_json_success();
		if ( $status ) {
			$status = $status['files'];
			$status = array_keys( $status );
			// malCure_Utils::flog($status);
			$status = array_pop( $status );
			// malCure_Utils::flog( $status );
			// $status =  $status[count($status) - 2];
			wp_send_json_success( $status );
		}
		wp_send_json_error();
	}

	function submenu_page() {
		add_submenu_page(
			'_mss',  // parent_slug
			'malCure WordPress Malware Scanner', // page_title
			'Malware Scanner', // menu_title
			MSS_GOD, // capability
			'scanner_mss',    // menu slug
			array( $this, 'scanner_mss_page' ), // callback
			null // position
		);
	}

	function get_checksums() {
		return malCure_Utils::fetch_checksums();
	}

	function fails_checksum( $local_file ) {
		$checksums = $this->get_checksums();
		$expected  = @md5_file( $local_file );
		if ( ! $expected ) {
			malCure_Utils::flog( 'Failed to generate checksum for ' . $local_file );
			return 1;
		}
		$match_path = malCure_Utils::normalize_path( $local_file );
		if ( array_key_exists( $match_path, $checksums ) ) {
			if ( is_array( $checksums[ $match_path ] ) ) { // plugin readmes can have multiple md5 hashes since a readme.txt can be updated on svn without bumping the plugin version
				if ( ! in_array( $expected, $checksums[ $match_path ] ) ) {
					return 1;
				} else {
					return;
				}
			} else {
				if ( $checksums[ $match_path ] != $expected ) {
					return 1;
				} else {
					return;
				}
			}
		} else {
			return 1; // we found a file that's not a part of WordPress
		}
		// return verify_file_md5()
	}

}

malCure_Malware_Scanner::get_instance();
