<?php

class malCure_Malware_Scanner extends malCure_Scanner {
	static function get_instance() {
		static $instance = null;
		if ( is_null( $instance ) ) {
			$instance = new self();
			$instance->init();
		}
		return $instance;
	}

	private function __construct() {
	}

	function init() {
		add_action( 'mss_settings_menu', array( $this, 'submenu_page' ) );

		add_action( 'wp_ajax_mss_trigger_scan', array( $this, 'mss_trigger_scan' ) );
		add_action( 'wp_ajax_nopriv_mss_trigger_scan', '__return_false' );

		add_action( 'wp_ajax_mss_full_scan', array( $this, 'full_scan_responder' ) );
		add_action( 'wp_ajax_nopriv_mss_full_scan', array( $this, 'full_scan_responder' ) );

		add_action( 'wp_ajax_mss_singular_scan_request', array( $this, 'singular_scan_responder' ) );  // Connect to final end-point, prone to hang
		add_action( 'wp_ajax_nopriv_mss_singular_scan_request', array( $this, 'singular_scan_responder' ) );  // Connect to final end-point, prone to hang

		add_action( 'wp_ajax_mss_scan_status', array( $this, 'mss_scan_status_handler' ) );
		add_action( 'wp_ajax_nopriv_mss_scan_status', '__return_false' );

		// add_filter( 'wp_headers', array( $this, 'filter_headers' ) );
	}

	function submenu_page() {
		add_submenu_page(
			'_mss',  // parent_slug
			'malCure WordPress Malware Scanner', // page_title
			'Malware Scanner', // menu_title
			MSS_GOD, // capability
			'scanner_mss',    // menu slug
			array( $this, 'scanner_mss_page' ), // callback
			null // position
		);
	}

	function test_alter( &$item1, $key, $prefix ) {
		$item1 = "$prefix: $item1";
	}

	function get_checksums() {
		$checksums = malCure_Utils::get_checksums();

		// $checksums = array_flip( $checksums );

		$normalized_checksums = array();
		foreach ( $checksums as $file => $hash ) {
			$normalized_checksums[ ABSPATH . $file ] = $hash;
		}

		// malCure_Utils::llog( $normalized_checksums );
		return $normalized_checksums;

		array_walk(
			$checksums,
			function ( &$item1, $key, $prefix ) {
				$item1 = $prefix . $item1;
			},
			ABSPATH
		);

		return array_flip( $checksums );

	}

	function filter_headers( $headers ) {
		malCure_Utils::llog( $headers );
		// var_dump($headers); #=> if you want to see the current headers...

		// if ( ! is_admin() ) {
		// $headers['X-UA-Compatible'] = 'IE=edge,chrome=1';
		// }

		return $headers;
	}

	function filter_wp_headers() {
		return header( 'Status: 400' );
	}

	/**
	 * Init Scan
	 */
	function mss_trigger_scan() {
		// nocache_headers();
		// add_filter( 'wp_headers', array( $this, 'filter_wp_headers' ) );
		// header( 'Status: 400' );
		// session_write_close();
		// fastcgi_finish_request();
		// status_header( '400' );
		// header_remove('')
		// send_headers();
		// wp_die('',400);
		// malCure_Utils::llog( 'test if the server can do remote request to itself' );
		// malCure_Utils::llog( 'use getrusage to build system stats. return these on every status update.' );
		// $this->definitions = malCure_Utils::get_malware_file_definitions( 'malware-signatures' );
		// // malCure_Utils::llog( $this->definitions );
		// // return;
		// if ( malCure_Utils::get_setting( 'mc_scan_tracker' ) ) {
		// malCure_Utils::llog( 'Unfinished scan in progress.' );
		// malCure_Utils::delete_setting( 'mc_scan_tracker' );
		// malCure_Utils::llog( 'remove the above line.' );
		// return;
		// }
		// malCure_Utils::llog( 'uncomment the next line to trigger scan.' );
		// $this->scan_request();
		// =========================

		$args = array(
			'blocking' => false,
			'timeout'  => 0.01,
			'body'     => array(
				'action' => 'mss_full_scan',
				'data'   => time(),
				// 'type'            => $type,
				// 'mc_scan_tracker' => malCure_Utils::get_setting( 'mc_scan_tracker' ),
			),
		);
		$response = wp_remote_post(
			admin_url( 'admin-ajax.php' ),
			$args
		);

		wp_send_json( $response );
		$status_code = wp_remote_retrieve_response_code( $response );
		if ( 200 != $status_code ) {
			// return new WP_Error( 'broke', 'Got HTTP error ' . $status_code . ' while checking definition updates.' );
			malCure_Utils::llog( 'Status Code Error: ' . $status_code );
		}
		if ( is_wp_error( $response ) ) {
			// return $response;
			malCure_Utils::llog( $response->get_error_message() );
		}
		$body = wp_remote_retrieve_body( $response );

		$scan_result = json_decode( $body, true );
		if ( is_null( $scan_result ) ) {
			malCure_Utils::llog( 'Unparsable scan result.' );
		}
		if ( $scan_result['success'] != true ) {
			malCure_Utils::llog( sanitize_text_field( $scan_result['data'] ) );
		}
		if ( ! empty( $scan_result['success'] ) && $scan_result['success'] == true ) {
			$scan_result = $scan_result['data'];
		}
	}

	/**
	 * Step 2: Processes a full file + DB scan over remote requests
	 */
	function full_scan_responder() {

		$type = 'files';

		if ( $type == 'files' ) {
			$start_time = microtime( true );
			$checksums  = $this->get_checksums();
			$files      = malCure_Utils::get_files();

			if ( ! empty( $files['files'] ) ) {
				$files = $files['files'];
			} else {
				throw new Exception( 'Scanner could not generate a list of files.' );
			}

			$mc_scan_tracker = time();
			malCure_Utils::update_setting( 'mc_scan_tracker', $mc_scan_tracker );

			foreach ( $files as $file ) {
				set_time_limit( 1 );
				// malCure_Utils::llog( $file );
				if ( array_key_exists( $file, $checksums ) ) {  // we have a checksum
					if ( $checksums[ $file ] !== md5_file( $file ) ) {
						malCure_Utils::flog( 'file:' . $file . ' did not match ' . md5_file( $file ) . 'Expected: ' . $checksums[ $file ] );
						$this->make_singular_scan_request( $file, 'file' );
					}
					else {
						malCure_Utils::flog( 'file:' . $file . ' match ' . md5_file( $file ) . 'Expected: ' . $checksums[ $file ] );
					}
				} else { // we don't have a checksum
					malCure_Utils::flog( 'file:' . $file . ' checksum ' . md5_file( $file ) . ' missing' );
					$this->make_singular_scan_request( $file, 'file' );
				}
				// $this->flog( ini_get( 'max_execution_time' ) );
			}
			malCure_Utils::delete_setting( 'mc_scan_tracker' );
			$end_time       = microtime( true );
			$execution_time = ( $end_time - $start_time );
			malCure_Utils::flog( 'Execution Time: ' . human_time_diff( $start_time, $end_time ) );
			// wp_send_json( $_REQUEST );
			// wp_send_json_error( $_REQUEST );
			wp_send_json_success(
				array(
					'checksums' => $checksums,
					'files'     => $files,
				)
			);
		}

		if ( $type = 'db' ) {
		}

	}

	/**
	 * Function to request a singular remote scan
	 *
	 * @param [type] $data
	 * @param [type] $type
	 * @return void
	 */
	function make_singular_scan_request( $data, $type ) {

		$start_time = microtime( true );
		$args       = array(
			'blocking' => true,
			'timeout'  => 1,
			'body'     => array(
				'action'          => 'mss_singular_scan_request',
				'data'            => $data,
				'type'            => $type,
				'mc_scan_tracker' => malCure_Utils::get_setting( 'mc_scan_tracker' ),
			),
		);
		// malCure_Utils::llog( $args );
		$response = wp_remote_post(
			admin_url( 'admin-ajax.php' ),
			$args
		);

		// ----------

		$status_code = wp_remote_retrieve_response_code( $response );
		if ( 200 != $status_code ) {
			// return new WP_Error( 'broke', 'Got HTTP error ' . $status_code . ' while checking definition updates.' );
			malCure_Utils::llog( 'Status Code Error: ' . $status_code );
		}
		if ( is_wp_error( $response ) ) {
			// return $response;
			malCure_Utils::llog( $response->get_error_message() );
		}
		$body = wp_remote_retrieve_body( $response );

		$scan_result = json_decode( $body, true );
		if ( is_null( $scan_result ) ) {
			malCure_Utils::llog( 'Unparsable scan result.' );
			// return new WP_Error( 'broke', 'Unparsable scan result.' );
		}

		if ( $scan_result['success'] != true ) {
			malCure_Utils::llog( sanitize_text_field( $scan_result['data'] ) );
			// return new WP_Error( 'broke', sanitize_text_field( $scan_result['data'] ) );
		}
		if ( ! empty( $scan_result['success'] ) && $scan_result['success'] == true ) {
			$scan_result = $scan_result['data'];
			// $time    = date( 'U' );
			// self::update_setting( 'update-version', $scan_result );
			// malCure_Utils::llog( $scan_result );
		}
		$end_time = microtime( true );
		malCure_Utils::flog( 'Scan Execution Time: of file ' . $data . "\n" . ( $end_time - $start_time ) );
	}

	/**
	 * Final end-point, Responds to ajax scan request, scans synchronously, prone to hang
	 *
	 * @return void
	 */
	function singular_scan_responder() {
		if ( $_REQUEST['mc_scan_tracker'] === malCure_Utils::get_setting( 'mc_scan_tracker' ) ) {

		}
		$data = $_REQUEST['data'];
		$type = $_REQUEST['type'];

		if ( $type == 'file' ) {
			$result = $this->scan_file( $data );
			malCure_Utils::flog( $data );
		}
		if ( ( $type == 'db' ) ) {

		}
		malCure_Utils::flog( $_REQUEST );
		// wp_send_json_success( $this->definitions );
		wp_send_json_success( $_REQUEST );
	}

	function update_scan_results( $type, $status ) {
		if ( $type == 'file' ) {

		}
	}

	/**
	 * Send status of the scan
	 */
	function mss_scan_status_handler() {
		$status = get_option( 'MSS_SCAN_PROGRESS' );
		if ( $status ) {
			wp_send_json_success( $status );
		}
		wp_send_json_error();
	}

	function scanner_mss_page() {
		?>
		<div class="wrap">
			<h1>malCure WordPress Integrity Checker</h1>
			<div class="container">
				<?php
				echo '<div id="mss_scanner_branding" class="mss_branding" >' . $this->render_branding() . '</div>';
				?>
				<div id="mss_scanner_dashboard">
				<?php submit_button( 'Scan', 'primary', 'mss_scan_btn' ); ?>
				</div> <!-- / mss_scanner_dashboard -->
			</div> <!-- / container -->
		</div> <!-- / wrap -->

		<script type="text/javascript">
			jQuery(document).ready(function($){
				$("#mss_scan_btn").click(function(){
					mss_trigger_scan = {
						// mss_scan_nonce: '<?php echo wp_create_nonce( 'mss_trigger_scan' ); ?>',
						action: "mss_trigger_scan",
						//cachebust: Date.now(), // 
					};
					//$("#mss_trigger_scan").fadeTo("slow",.1,);
					$.ajax({
						url: ajaxurl,
						method: 'POST',
						data: mss_trigger_scan,
						success: function(data, textStatus, jqXHR) {
							console.dir('success Data Begins');
							console.dir(data);
							console.dir(textStatus);
							console.dir(jqXHR);
							console.dir('success Data Ends');

							mss_status_updater = setInterval(mss_update_scan_status,1000);

							if ((typeof data) != 'object') { // is the server not sending us JSON?
								//response = JSON.parse( response );
							}
							if (data.hasOwnProperty('success')) { // ajax request has a success but we haven't tested if success is true or false
								
							} else { // perhaps this is just JSON without a success object
								
							}
						},
						error: function( jqXHR, textStatus, errorThrown){
							// console.dir('error Data Begins');
							// console.dir(jqXHR);
							// console.dir(textStatus);
							// console.dir(errorThrown);
							// console.dir('error Data Ends');
						},
						complete: function(jqXHR_data, textStatus) { // use this since we need to run and catch regardless of success and failure
							// console.dir('complete Data Begins');
							// console.dir(jqXHR_data);
							// console.dir(textStatus);
							// console.dir('complete Data Ends');
							// // a good JSON response may have status: 200, statusText: "success", responseJSON (object)
						},
					});
				});

				mss_status_updater = setInterval(mss_update_scan_status,1000);
			});

		function mss_update_scan_status() {
			var $ = jQuery.noConflict();
			mss_scan_status = {
				mss_scan_status_nonce: '<?php echo wp_create_nonce( 'mss_scan_status' ); ?>',
				action: "mss_scan_status",
				//cachebust: Date.now(), // 
			};
			//$("#mss_trigger_scan").fadeTo("slow",.1,);
			$.ajax({
				url: ajaxurl,
				method: 'POST',
				data: mss_scan_status,
				success: function(data, textStatus, jqXHR) {
					console.dir('updater success Data Begins');
					console.dir(data);
					console.dir(textStatus);
					console.dir(jqXHR);
					console.dir('updater success Data Ends');

					if(data.hasOwnProperty('success') && data.success) {

					}
					else {
						clearInterval(mss_status_updater);
						console.log('Updater got failure. Please reload the page.')
					}
					if ((typeof data) != 'object') { // is the server not sending us JSON?
						//response = JSON.parse( response );
					}
					if (data.hasOwnProperty('success')) { // ajax request has a success but we haven't tested if success is true or false
						
					} else { // perhaps this is just JSON without a success object
						
					}
				},
				error: function( jqXHR, textStatus, errorThrown){
					console.dir('updater error Data Begins');
					console.dir(jqXHR);
					console.dir(textStatus);
					console.dir(errorThrown);
					console.dir('updater error Data Ends');
				},
				complete: function(jqXHR_data, textStatus) { // use this since we need to run and catch regardless of success and failure
					console.dir('updater complete Data Begins');
					console.dir(jqXHR_data);
					console.dir(textStatus);
					console.dir('updater complete Data Ends');
					// a good JSON response may have status: 200, statusText: "success", responseJSON (object)
				},
			});
		}
		</script>
		<?php
	}

	function render_branding() {
		return '<img src="' . MSS_URL . 'assets/logo-light-trans.svg" />';
	}


}


malCure_Malware_Scanner::get_instance();
