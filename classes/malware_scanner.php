<?php

class malCure_Malware_Scanner extends malCure_Scanner {
	static function get_instance() {
		static $instance = null;
		if ( is_null( $instance ) ) {
			$instance = new self();
			$instance->init();
		}
		return $instance;
	}

	private function __construct() {
	}

	function init() {
		add_action( 'mss_settings_menu', array( $this, 'submenu_page' ) );

		add_action( 'wp_ajax_mss_scan', array( $this, 'mss_scan_handler' ) );
		add_action( 'wp_ajax_nopriv_mss_scan', '__return_false' );

		add_action( 'wp_ajax_mss_scan_status', array( $this, 'mss_scan_status_handler' ) );
		add_action( 'wp_ajax_nopriv_mss_scan_status', '__return_false' );

		add_action( 'wp_ajax_mss_malware_scan', array( $this, 'malware_scan_handler' ) );
		add_action( 'wp_ajax_nopriv_mss_malware_scan', array( $this, 'malware_scan_handler' ) );
	}

	function submenu_page() {
		add_submenu_page(
			'_mss',  // parent_slug
			'malCure WordPress Malware Scanner', // page_title
			'Malware Scanner', // menu_title
			MSS_GOD, // capability
			'scanner_mss',    // menu slug
			array( $this, 'scanner_mss_page' ), // callback
			null // position
		);
	}

	function test_alter( &$item1, $key, $prefix ) {
		$item1 = "$prefix: $item1";
	}

	function get_checksums() {
		$checksums = malCure_Utils::get_checksums();

		// $checksums = array_flip( $checksums );

		$normalized_checksums = array();
		foreach ( $checksums as $file => $hash ) {
			$normalized_checksums[ ABSPATH . $file ] = $hash;
		}

		// malCure_Utils::llog( $normalized_checksums );
		return $normalized_checksums;

		array_walk(
			$checksums,
			function ( &$item1, $key, $prefix ) {
				$item1 = $prefix . $item1;
			},
			ABSPATH
		);

		return array_flip( $checksums );

	}

	/**
	 * Init Scan
	 */
	function mss_scan_handler() {
		// session_write_close();

		$checksums = $this->get_checksums();
		$files     = malCure_Utils::get_files();

		if ( ! empty( $files['files'] ) ) {
			$files = $files['files'];
		} else {
			throw new Exception( 'Scanner could not generate a list of files.' );
		}

		foreach ( $files as $file ) {

			// malCure_Utils::llog( $file );

			if ( array_key_exists( $file, $checksums ) ) {  // we have a checksum
				if ( $checksums[ $file ] !== md5_file( $file ) ) {
					$this->scan_processor( $file, 'file' );
				}
			} else { // we don't have a checksum
				$this->scan_processor( $file, 'file' );
			}
		}
		
		// wp_send_json( $_REQUEST );
		// wp_send_json_error( $_REQUEST );
		wp_send_json_success(
			array(
				'checksums' => $checksums,
				'files'     => $files,
			)
		);
	}

	function scan_processor( $data, $type ) {

		$response = wp_remote_post(
			admin_url( 'admin-ajax.php' ),
			array(
				'blocking' => true,
				'timeout'  => 30,
				'body'     => array(
					'action'         => 'mss_malware_scan',
					'data'           => $data,
					'type'           => $type,
					'mss_scan_nonce' => wp_create_nonce( 'mss_scan' ),
				),
			)
		);

		// ----------

		$status_code = wp_remote_retrieve_response_code( $response );
		if ( 200 != $status_code ) {
			// return new WP_Error( 'broke', 'Got HTTP error ' . $status_code . ' while checking definition updates.' );
			malCure_Utils::llog( 'Status Code Error: ' . $status_code );
		}
		if ( is_wp_error( $response ) ) {
			// return $response;
			malCure_Utils::llog( $response->get_error_message() );
		}
		$body = wp_remote_retrieve_body( $response );
		//malCure_Utils::llog( $body );
		//return;
		$scan_result = json_decode( $body, true );
		if ( is_null( $scan_result ) ) {
			malCure_Utils::llog( 'Unparsable scan result.' );
			// return new WP_Error( 'broke', 'Unparsable scan result.' );
		}
		if ( $scan_result['success'] != true ) {
			malCure_Utils::llog( sanitize_text_field( $scan_result['data'] ) );
			// return new WP_Error( 'broke', sanitize_text_field( $scan_result['data'] ) );
		}
		if ( ! empty( $scan_result['success'] ) && $scan_result['success'] == true ) {
			$scan_result = $scan_result['data'];
			// $time    = date( 'U' );
			// self::update_setting( 'update-version', $scan_result );
			malCure_Utils::llog( $scan_result );
		}

	}

	function malware_scan_handler() {
		$this->flog( $_REQUEST  );
		wp_send_json_success( $_REQUEST );
	}

	function flog( $str ) {
		$date = date( 'Ymd-G:i:s' ); // 20171231-23:59:59
		$date = $date . '-' . microtime( true );
		$file = MSS_DIR . 'log.log';
		file_put_contents( $file, PHP_EOL . $date, FILE_APPEND | LOCK_EX );
		usleep( 1000 );
		$str = print_r( $str, true );
		file_put_contents( $file, PHP_EOL . $str, FILE_APPEND | LOCK_EX );
		usleep( 1000 );
	}

	/**
	 * Send status of the scan
	 */
	function mss_scan_status_handler() {
		$status = get_option( 'MSS_SCAN_PROGRESS' );
		if ( $status ) {
			wp_send_json_success( $status );
		}
		wp_send_json_error();
	}



	function scanner_mss_page() {
		?>
		<div class="wrap">
			<h1>malCure WordPress Integrity Checker</h1>
			<div class="container">
				<?php
				echo '<div id="mss_scanner_branding" class="mss_branding" >' . $this->render_branding() . '</div>';
				?>
				<div id="mss_scanner_dashboard">
				<?php echo '<a href="#" class="button-primary" role="button" id="mss_scan_btn">Scan </a>'; ?>
				</div> <!-- / mss_scanner_dashboard -->
			</div> <!-- / container -->
		</div> <!-- / wrap -->

		<script type="text/javascript">
			jQuery(document).ready(function($){
				$("#mss_scan_btn").click(function(){
					mss_scan = {
						mss_scan_nonce: '<?php echo wp_create_nonce( 'mss_scan' ); ?>',
						action: "mss_scan",
						//cachebust: Date.now(), // 
					};
					//$("#mss_scan").fadeTo("slow",.1,);
					$.ajax({
						url: ajaxurl,
						method: 'POST',
						data: mss_scan,
						success: function(data, textStatus, jqXHR) {
							console.dir('success Data Begins');
							console.dir(data);
							console.dir(textStatus);
							console.dir(jqXHR);
							console.dir('success Data Ends');

							mss_status_updater = setInterval(mss_update_scan_status,1000);

							if ((typeof data) != 'object') { // is the server not sending us JSON?
								//response = JSON.parse( response );
							}
							if (data.hasOwnProperty('success')) { // ajax request has a success but we haven't tested if success is true or false
								
							} else { // perhaps this is just JSON without a success object
								
							}
						},
						error: function( jqXHR, textStatus, errorThrown){
							// console.dir('error Data Begins');
							// console.dir(jqXHR);
							// console.dir(textStatus);
							// console.dir(errorThrown);
							// console.dir('error Data Ends');
						},
						complete: function(jqXHR_data, textStatus) { // use this since we need to run and catch regardless of success and failure
							// console.dir('complete Data Begins');
							// console.dir(jqXHR_data);
							// console.dir(textStatus);
							// console.dir('complete Data Ends');
							// // a good JSON response may have status: 200, statusText: "success", responseJSON (object)
						},
					});
				});

				mss_status_updater = setInterval(mss_update_scan_status,1000);
			});

		function mss_update_scan_status() {
			var $ = jQuery.noConflict();
			mss_scan_status = {
				mss_scan_status_nonce: '<?php echo wp_create_nonce( 'mss_scan_status' ); ?>',
				action: "mss_scan_status",
				//cachebust: Date.now(), // 
			};
			//$("#mss_scan").fadeTo("slow",.1,);
			$.ajax({
				url: ajaxurl,
				method: 'POST',
				data: mss_scan_status,
				success: function(data, textStatus, jqXHR) {
					console.dir('updater success Data Begins');
					console.dir(data);
					console.dir(textStatus);
					console.dir(jqXHR);
					console.dir('updater success Data Ends');

					if(data.hasOwnProperty('success') && data.success) {

					}
					else {
						clearInterval(mss_status_updater);
						console.log('Updater got failure. Please reload the page.')
					}
					if ((typeof data) != 'object') { // is the server not sending us JSON?
						//response = JSON.parse( response );
					}
					if (data.hasOwnProperty('success')) { // ajax request has a success but we haven't tested if success is true or false
						
					} else { // perhaps this is just JSON without a success object
						
					}
				},
				error: function( jqXHR, textStatus, errorThrown){
					console.dir('updater error Data Begins');
					console.dir(jqXHR);
					console.dir(textStatus);
					console.dir(errorThrown);
					console.dir('updater error Data Ends');
				},
				complete: function(jqXHR_data, textStatus) { // use this since we need to run and catch regardless of success and failure
					console.dir('updater complete Data Begins');
					console.dir(jqXHR_data);
					console.dir(textStatus);
					console.dir('updater complete Data Ends');
					// a good JSON response may have status: 200, statusText: "success", responseJSON (object)
				},
			});
		}
		</script>
		<?php
	}

	function render_branding() {
		return '<img src="' . MSS_URL . 'assets/logo-light-trans.svg" />';
	}


}


malCure_Malware_Scanner::get_instance();
